apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://github.com/hyamamoto/maven-repository/raw/master/releases'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}


dependencies {
    compile 'junit:junit:4.11'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-validator:commons-validator:1.4.1'
    compile 'net.objecthunter:exp4j:0.4.0.ALPHA-3'
    compile 'dnsjava:dnsjava:2.1.7'
    compile 'com.google.guava:guava:17.0'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.slf4j:slf4j-simple:1.7.7'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:fluent-hc:4.5'
    compile 'jp.freepress.repo:WolframAlpha:1.1'
    compile 'org.pircbotx:pircbotx:2.1'
    compile 'org.jooq:jooq:3.5.0'
    compile 'org.flywaydb:flyway-core:3.1'
    compile 'org.jasypt:jasypt:1.9.2'
    compile 'com.wordnik:wordnik-java-client:1.0.0'
    compile 'org.jsoup:jsoup:1.7.3'
    compile 'com.sun.jersey:jersey-bundle:1.18.1'
    compile 'org.reflections:reflections:0.9.9'
    compile 'com.google.apis:google-api-services-youtube:v3-rev120-1.19.0'
    compile 'com.kohlschutter.junixsocket:junixsocket-common:2.0.4'
    compile 'com.kohlschutter.junixsocket:junixsocket-native-common:2.0.4'
    compile 'org.xerial:sqlite-jdbc:3.8.7'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.5.0'
        classpath 'org.xerial:sqlite-jdbc:3.8.7'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.1'
    }
}
apply plugin: 'flyway'
flyway {
    url = 'jdbc:sqlite:./tempdb.sqlite'
}
task codeGen << {
// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.5.0.xsd') {
        jdbc() {
            driver('org.sqlite.JDBC')
            url('jdbc:sqlite:./tempdb.sqlite')
        }
        generator() {
            database() {
            }
            generate() {
            }
            target() {
                packageName('info.techcavern.wavetactdb')
                directory('src/main/java')
            }
        }
    }
    org.jooq.util.GenerationTool.main(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()),
                    org.jooq.util.jaxb.Configuration.class)
    )
}
task deleteTempDb(type: Delete) {
    delete 'tempdb.sqlite'
}
codeGen.dependsOn tasks.flywayMigrate
codeGen.finalizedBy deleteTempDb
tasks.idea.dependsOn codeGen
compileJava.dependsOn codeGen
project.afterEvaluate {
    flywayClean.dependsOn -= testClasses
    flywayMigrate.dependsOn = [processResources, processTestResources]
}
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
task copyDeps(type: Copy) {
    from configurations.runtime
    into 'build/lib'
}
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes('Main-class': 'info.techcavern.wavetact.Main')
    }
}
